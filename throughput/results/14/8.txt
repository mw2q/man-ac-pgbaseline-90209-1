BEGIN;
BEGIN
EXPLAIN (ANALYZE, BUFFERS)
select
	o_year,
	sum(case
		when nation = 'SAUDI ARABIA' then volume
		else 0
	end) / sum(volume) as mkt_share
from
	(
		select
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) as volume,
			n2.n_name as nation
		from
			part,
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2,
			region
		where
			p_partkey = l_partkey
			and s_suppkey = l_suppkey
			and l_orderkey = o_orderkey
			and o_custkey = c_custkey
			and c_nationkey = n1.n_nationkey
			and n1.n_regionkey = r_regionkey
			and r_name = 'MIDDLE EAST'
			and s_nationkey = n2.n_nationkey
			and o_orderdate between date '1995-01-01' and date '1996-12-31'
			and p_type = 'SMALL POLISHED COPPER'
	) as all_nations
group by
	o_year
order by
	o_year;
                                                                                                 QUERY PLAN                                                                                                  
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2196447.35..2196449.18 rows=731 width=38) (actual time=27967.048..27967.048 rows=2 loops=1)
   Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
   Sort Method: quicksort  Memory: 25kB
   Buffers: shared hit=746284 read=254809 dirtied=3298 written=396
   ->  HashAggregate  (cost=2196399.79..2196412.58 rows=731 width=38) (actual time=27966.992..27966.994 rows=2 loops=1)
         Buffers: shared hit=746281 read=254809 dirtied=3298 written=396
         ->  Nested Loop  (cost=503095.35..2195902.25 rows=24877 width=38) (actual time=19124.570..27894.192 rows=24144 loops=1)
               Buffers: shared hit=746281 read=254809 dirtied=3298 written=396
               ->  Nested Loop  (cost=503095.35..2188807.33 rows=24877 width=16) (actual time=19124.518..27691.532 rows=24144 loops=1)
                     Buffers: shared hit=697993 read=254809 dirtied=3298 written=396
                     ->  Hash Join  (cost=503095.35..2181563.11 rows=24877 width=16) (actual time=19124.493..27311.121 rows=24144 loops=1)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           Buffers: shared hit=625443 read=254809 dirtied=3298 written=396
                           ->  Nested Loop  (cost=0.00..1676171.19 rows=409559 width=16) (actual time=0.376..7027.557 rows=394032 loops=1)
                                 Buffers: shared hit=223556 read=240786 dirtied=3298 written=396
                                 ->  Index Only Scan using part_p_type_p_partkey_idx on part  (cost=0.00..46779.89 rows=13480 width=4) (actual time=0.269..159.384 rows=13153 loops=1)
                                       Index Cond: (p_type = 'SMALL POLISHED COPPER'::text)
                                       Heap Fetches: 13153
                                       Buffers: shared hit=7440 read=3895 written=14
                                 ->  Index Scan using lineitem_l_partkey_l_quantity_l_shipmode_idx on lineitem  (cost=0.00..120.56 rows=31 width=20) (actual time=0.049..0.505 rows=30 loops=13153)
                                       Index Cond: (l_partkey = part.p_partkey)
                                       Buffers: shared hit=216116 read=236891 dirtied=3298 written=382
                           ->  Hash  (cost=491558.43..491558.43 rows=922954 width=8) (actual time=19122.521..19122.521 rows=911364 loops=1)
                                 Buckets: 131072  Batches: 1  Memory Usage: 35601kB
                                 Buffers: shared hit=401884 read=14023
                                 ->  Hash Join  (cost=139241.99..491558.43 rows=922954 width=8) (actual time=3738.913..18665.047 rows=911364 loops=1)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       Buffers: shared hit=401884 read=14023
                                       ->  Bitmap Heap Scan on orders  (cost=100211.36..425992.88 rows=4614768 width=12) (actual time=2876.884..6757.708 rows=4561702 loops=1)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             Buffers: shared hit=256560 read=13191
                                             ->  Bitmap Index Scan on orders_o_orderdate_o_orderkey_idx  (cost=0.00..99057.67 rows=4614768 width=0) (actual time=2738.204..2738.204 rows=4616605 loops=1)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   Buffers: shared read=13191
                                       ->  Hash  (cost=35280.62..35280.62 rows=300000 width=4) (actual time=861.134..861.134 rows=299838 loops=1)
                                             Buckets: 32768  Batches: 1  Memory Usage: 10542kB
                                             Buffers: shared hit=145324 read=832
                                             ->  Nested Loop  (cost=906.17..35280.62 rows=300000 width=4) (actual time=36.414..757.698 rows=299838 loops=1)
                                                   Buffers: shared hit=145324 read=832
                                                   ->  Hash Join  (cost=1.07..2.47 rows=5 width=4) (actual time=0.023..0.071 rows=5 loops=1)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         Buffers: shared hit=2
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8) (actual time=0.003..0.015 rows=25 loops=1)
                                                               Buffers: shared hit=1
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4) (actual time=0.011..0.011 rows=1 loops=1)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                               Buffers: shared hit=1
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4) (actual time=0.009..0.010 rows=1 loops=1)
                                                                     Filter: (r_name = 'MIDDLE EAST'::bpchar)
                                                                     Rows Removed by Filter: 4
                                                                     Buffers: shared hit=1
                                                   ->  Bitmap Heap Scan on customer  (cost=905.09..6455.63 rows=60000 width=8) (actual time=22.293..139.630 rows=59968 loops=5)
                                                         Recheck Cond: (c_nationkey = n1.n_nationkey)
                                                         Buffers: shared hit=145322 read=832
                                                         ->  Bitmap Index Scan on customer_c_nationkey_c_custkey_idx  (cost=0.00..890.09 rows=60000 width=0) (actual time=15.583..15.583 rows=59968 loops=5)
                                                               Index Cond: (c_nationkey = n1.n_nationkey)
                                                               Buffers: shared hit=5 read=832
                     ->  Index Scan using pk_supplier on supplier  (cost=0.00..0.28 rows=1 width=8) (actual time=0.013..0.013 rows=1 loops=24144)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
                           Buffers: shared hit=72550
               ->  Index Scan using pk_nation on nation n2  (cost=0.00..0.27 rows=1 width=30) (actual time=0.005..0.005 rows=1 loops=24144)
                     Index Cond: (n_nationkey = supplier.s_nationkey)
                     Buffers: shared hit=48288
 Total runtime: 27980.279 ms
(64 rows)

COMMIT;
COMMIT
